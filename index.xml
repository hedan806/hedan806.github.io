<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Honlyc - Your are free</title>
    <link>http://www.honlyc.com/</link>
    <description>Recent content on Honlyc - Your are free</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 16 Mar 2020 20:48:13 +0800</lastBuildDate>
    
	<atom:link href="http://www.honlyc.com/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Elasticsearch 7.4</title>
      <link>http://www.honlyc.com/post/elasticsearch-7.4.0-auth/</link>
      <pubDate>Mon, 16 Mar 2020 20:48:13 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/elasticsearch-7.4.0-auth/</guid>
      <description>Elasticsearch 7.4.0 集群添加认证 本文主要介绍基于Docker部署时，Elasticsearch如何添加认证。 主要步骤 1. 生成认证秘钥 使用一个镜像，专门生成一个</description>
    </item>
    
    <item>
      <title>Ambari Custom Alert Notification</title>
      <link>http://www.honlyc.com/post/ambari-custom-alert-notification/</link>
      <pubDate>Fri, 13 Mar 2020 19:52:02 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/ambari-custom-alert-notification/</guid>
      <description>Ambari 自定义告警通知 创建一个自定义告警通知项： 1 2 3 4 5 6 7 8 9 10 11 12 13 14 curl -i -u admin:admin -H &amp;#39;X-Requested-By: ambari&amp;#39; -X POST &amp;#34;http://ambari-server:8080/api/v1/alert_targets&amp;#34; -d &amp;#39; { &amp;#34;AlertTarget&amp;#34;: { &amp;#34;name&amp;#34;: &amp;#34;test_dispatcher&amp;#34;, &amp;#34;description&amp;#34;: &amp;#34;Custom Notification Dispatcher&amp;#34;, &amp;#34;notification_type&amp;#34;: &amp;#34;ALERT_SCRIPT&amp;#34;, &amp;#34;global&amp;#34;: true, &amp;#34;alert_states&amp;#34;: [&amp;#34;CRITICAL&amp;#34;,&amp;#34;WARNING&amp;#34;,&amp;#34;UNKNOWN&amp;#34;,&amp;#34;OK&amp;#34;], &amp;#34;properties&amp;#34;: { &amp;#34;ambari.dispatch-property.script&amp;#34;: &amp;#34;notification.dispatch.alert.script&amp;#34; } } } 编</description>
    </item>
    
    <item>
      <title>Centos Init</title>
      <link>http://www.honlyc.com/post/centos-init/</link>
      <pubDate>Thu, 20 Feb 2020 14:58:46 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/centos-init/</guid>
      <description> Docker Step1: Update 1  sudo yum check-update   Step2: Install the Dependencies 1  sudo yum install -y yum-utils device-mapper-persistent-data lvm2   Step3: Add the Docker Repository to CentOS 1  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo   Step4: Install Docker 1  sudo yum install docker   Step5: Install Docker-compose 1 2 3  sudo curl -L &amp;#34;https://github.com/docker/compose/releases/download/1.25.3/docker-compose-$(uname -s)-$(uname -m)&amp;#34; -o /usr/local/bin/docker-compose sudo chmod +x /usr/local/bin/docker-compose  </description>
    </item>
    
    <item>
      <title>Ambari in Action 1</title>
      <link>http://www.honlyc.com/post/ambari-in-action-1/</link>
      <pubDate>Thu, 20 Feb 2020 14:49:01 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/ambari-in-action-1/</guid>
      <description>[TOC] Ambari 的安装 因为各种原因，如果直接用Ambari的官方包进行安装时，速度会极慢，而官方本身也是支持离线安装的。所以，本文使用离线安装的方式。 一</description>
    </item>
    
    <item>
      <title>私有 GitLab 仓库 &#43; picGo 快速实现图床</title>
      <link>http://www.honlyc.com/post/picgo-private-gitlab/</link>
      <pubDate>Tue, 19 Nov 2019 13:49:59 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/picgo-private-gitlab/</guid>
      <description>文章写完了，才发现Gitlab是可以直接粘贴图片的&amp;hellip;（逃&amp;hellip;.. 公司有自己的私有Gitlab库，但是没有自己的图床</description>
    </item>
    
    <item>
      <title>Elasticsearch 6.1.4 upgrade to 7.4.0</title>
      <link>http://www.honlyc.com/post/elasticsearch-6.1.4-upgrade-to-7.4.0-problem/</link>
      <pubDate>Wed, 09 Oct 2019 14:18:00 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/elasticsearch-6.1.4-upgrade-to-7.4.0-problem/</guid>
      <description>[TOC] 1. 集群改动 1. Zen Discovery 改动 不再有discovery.zen.minimum_master_nodes这个控制集群脑裂的配置，转而由集群自主控制，</description>
    </item>
    
    <item>
      <title>解决 Golang https 请求时，x509: certificate signed by unknown authority 问题</title>
      <link>http://www.honlyc.com/post/golang-x509-certificate-unknown-authority/</link>
      <pubDate>Fri, 23 Aug 2019 14:17:17 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/golang-x509-certificate-unknown-authority/</guid>
      <description>在使用http请求https://**网站时，报了x509: certificate signed by unknown authority这个错误。经查阅，是由于目标网站的CA证书在本机没有，</description>
    </item>
    
    <item>
      <title>Elasticsearch Unassigned Process</title>
      <link>http://www.honlyc.com/post/elasticsearch-unassigned-process/</link>
      <pubDate>Fri, 02 Aug 2019 14:18:00 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/elasticsearch-unassigned-process/</guid>
      <description>问题 在使用ES时，有时候在服务器突然挂掉后重启时，会导致有Shard的状态变成 了UNASSIGEND,此时，本身集群的数据是不准确的，因为这</description>
    </item>
    
    <item>
      <title>Ubuntu Init</title>
      <link>http://www.honlyc.com/post/ubuntu-init/</link>
      <pubDate>Tue, 23 Jul 2019 09:53:35 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/ubuntu-init/</guid>
      <description>[TOC] sudo 不需要输入密码 1 sudo vi /etc/sudoers 找到%sudo ALL=(ALL:ALL) ALL这一行，修改为：%sudo ALL=(ALL:ALL) NOPASSWD:ALL; 这样，所有sudo组内的用户使用sudo就不需要输入密码啦。</description>
    </item>
    
    <item>
      <title>Linux 中分析超大 JVM dump 文件</title>
      <link>http://www.honlyc.com/post/linux-hrpof/</link>
      <pubDate>Thu, 13 Jun 2019 17:24:05 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/linux-hrpof/</guid>
      <description>1. 场景 在使用Elasticsearch时，碰到内存溢出的情况，因为配置了-XX:+HeapDumpOnOutOfMemoryError索引会</description>
    </item>
    
    <item>
      <title>Gin 和 Vue 项目打包静态文件</title>
      <link>http://www.honlyc.com/post/go-web-vue-static-embed/</link>
      <pubDate>Tue, 16 Apr 2019 17:14:49 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/go-web-vue-static-embed/</guid>
      <description>在使用 Go 语言带来的便利时，我们往往也热衷于打包成单一的可执行文件，这样不仅方便传输，也便于维护。 如果是普通的Go程序，倒是直接可以编译成可执</description>
    </item>
    
    <item>
      <title>Go Web 读取配置文件</title>
      <link>http://www.honlyc.com/post/go-web-config/</link>
      <pubDate>Sat, 06 Apr 2019 22:08:54 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/go-web-config/</guid>
      <description>Viper 简介 viper是spf13大神开发的开源配置解决方案，另外docker kubernetes等项目都在用的命令行解决方案cobra也是出自他</description>
    </item>
    
    <item>
      <title>Hugo 常用修改</title>
      <link>http://www.honlyc.com/post/hugo-custom-favicon/</link>
      <pubDate>Thu, 04 Apr 2019 17:50:09 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/hugo-custom-favicon/</guid>
      <description>favicon 使用Hugo搭建博客后，一般在使用了Theme后，会自带一个favicon，不过使用自己的会更(zhuang)好(13)。 其实使用这个很简</description>
    </item>
    
    <item>
      <title>Spring Webflux 获取请求 IP 的方法</title>
      <link>http://www.honlyc.com/post/spring-webflux-remote-ip/</link>
      <pubDate>Thu, 04 Apr 2019 15:39:44 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/spring-webflux-remote-ip/</guid>
      <description>问题描述 在使用WebFlux时，因为业务需要，要获取请求 IP 并作为日志输出。我使用的是RouterFunction方式的路由： 1 2 3 4 5 6 7 8</description>
    </item>
    
    <item>
      <title>使用 Go 来进行远程执行命令</title>
      <link>http://www.honlyc.com/post/go-ssh-guide/</link>
      <pubDate>Wed, 03 Apr 2019 15:42:14 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/go-ssh-guide/</guid>
      <description>封装一个Cli类，来作为主要执行的对象 1 2 3 4 5 6 7 8 type Cli struct { IP string //IP地址 Username string //用户名 Password string //密码 Port int //端口号 client *ssh.Client //ssh客户端 LastResult</description>
    </item>
    
    <item>
      <title>Git 基本使用</title>
      <link>http://www.honlyc.com/post/first/</link>
      <pubDate>Mon, 01 Apr 2019 17:11:16 +0800</pubDate>
      
      <guid>http://www.honlyc.com/post/first/</guid>
      <description>1. Git push 需要填写密码的问题</description>
    </item>
    
    <item>
      <title></title>
      <link>http://www.honlyc.com/post/elasticsearch-decider-custom/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://www.honlyc.com/post/elasticsearch-decider-custom/</guid>
      <description> title: &amp;ldquo;Custom Elasticsearch Shard Allocation Decider&amp;rdquo; date: 2019-11-05T16:08:31+08:00 draft: true tags: [&amp;ldquo;plugins&amp;rdquo;,&amp;ldquo;shard&amp;rdquo;] categories: [&amp;ldquo;elk&amp;rdquo;]
[TOC]
场景 对于一台机器部署了多个ES实例时，在分配Shard时，可能会存在热点的情况，如下图：
在同一台机器上的不同实例上，分配了两个Primary Shard，这样会导致这一台机器的负载要比其他的高，会影响整个集群的查询响应。
当前ES的配置中，并没有具体的参数可以避免这一情况，类似的参数有：
cluster.routing.allocation.same_shard.host：默认值是false，如果设置为true，那么就不允许将一个primary shard和replica shard分配到同一个物理机上，也许这个物理机上启动了多个es实例。
通过这个参数，我们同样可以自定义一个参数，来控制是否根据同一个机器，来进行Shard的分配。
分析源码 1. SameShardAllocationDecider分析 由cluster.routing.allocation.same_shard.host这个参数，我们可以分析源码，来借鉴其中的写法。
通过查看，我们找到org.elasticsearch.cluster.routing.allocation.decider.SameShardAllocationDecider这个类，其中继承了抽象类AllocationDecider，主要实现了两个方法：
 public Decision canAllocate(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation)
public Decision canForceAllocatePrimary(ShardRouting shardRouting, RoutingNode node, RoutingAllocation allocation)
 具体是代码实现相对简单：
大概逻辑是，判断checkNode和Node的HostAddress是否相同，如果相同，则返回不可分配的决定；如果不同，则返回可以分配的决定。
2. 决策器插件的加载 在org.elasticsearch.cluster.ClusterModule类中，可以看到createAllocationDeciders(Settings settings, ClusterSettings clusterSettings, List&amp;lt;ClusterPlugin&amp;gt; clusterPlugins)方法是用来初始化所有决策器的。
我们可以通过编写ClusterPlugin来进行自定义决策器的加载及使用。
插件编写 </description>
    </item>
    
  </channel>
</rss>